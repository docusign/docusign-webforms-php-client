<?php
declare(strict_types=1);

/**
 * FormInstanceManagementApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\WebForms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\WebForms\Api\FormInstanceManagementApi;


/**
 * ListInstancesOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\WebForms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListInstancesOptions
{
    /**
      * $client_user_id A unique identifier for a user that should originate from client's system. This value can be anything your backend system would use to track individual form instances. Examples include employee IDs, email addresses, surrogate key values, etc.
      * @var ?string
      */
    protected ?string $client_user_id = null;

    /**
     * Gets client_user_id
     *
     * @return ?string
     */
    public function getClientUserId(): ?string
    {
        return $this->client_user_id;
    }

    /**
     * Sets client_user_id
     * @param ?string $client_user_id A unique identifier for a user that should originate from client's system. This value can be anything your backend system would use to track individual form instances. Examples include employee IDs, email addresses, surrogate key values, etc.
     *
     * @return self
     */
    public function setClientUserId(?string $client_user_id): self
    {
        $this->client_user_id = $client_user_id;
        return $this;
    }
}



namespace DocuSign\WebForms\Api;

use DocuSign\WebForms\Client\ApiClient;
use DocuSign\WebForms\Client\ApiException;
use DocuSign\WebForms\Configuration;
use DocuSign\WebForms\ObjectSerializer;

/**
 * FormInstanceManagementApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\WebForms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormInstanceManagementApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation createInstance
     *
     * Creates an instance of the web form
     *
     * @param ?string $account_id Account identifier in which the web form resides
     * @param ?string $form_id Unique identifier for a web form entity that is consistent for it&#39;s lifetime
     * @param \DocuSign\WebForms\Model\CreateInstanceRequestBody $create_instance_body Request body containing properties that will be used to create instance. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\WebForms\Model\WebFormInstance
     */
    public function createInstance($account_id, $form_id, $create_instance_body)
    {
        list($response) = $this->createInstanceWithHttpInfo($account_id, $form_id, $create_instance_body);
        return $response;
    }

    /**
     * Operation createInstanceWithHttpInfo
     *
     * Creates an instance of the web form
     *
     * @param ?string $account_id Account identifier in which the web form resides
     * @param ?string $form_id Unique identifier for a web form entity that is consistent for it&#39;s lifetime
     * @param \DocuSign\WebForms\Model\CreateInstanceRequestBody $create_instance_body Request body containing properties that will be used to create instance. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\WebForms\Model\WebFormInstance, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInstanceWithHttpInfo($account_id, $form_id, $create_instance_body): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createInstance');
        }
        // verify the required parameter 'form_id' is set
        if ($form_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $form_id when calling createInstance');
        }
        // verify the required parameter 'create_instance_body' is set
        if ($create_instance_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_instance_body when calling createInstance');
        }
        // parse inputs
        $resourcePath = "/accounts/{accountId}/forms/{formId}/instances";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($form_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "formId", $form_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($create_instance_body)) {
            $_tempBody = $create_instance_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\WebForms\Model\WebFormInstance',
                '/accounts/{accountId}/forms/{formId}/instances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\WebForms\Model\WebFormInstance', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\WebFormInstance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInstance
     *
     * Get form instance
     *
     * @param ?string $account_id Account identifier in which the web form resides
     * @param ?string $form_id Unique identifier for a web form entity that is consistent for it&#39;s lifetime
     * @param ?string $instance_id Unique identifier for a Web Form Instance that is consistent until its expiration
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\WebForms\Model\WebFormInstance
     */
    public function getInstance($account_id, $form_id, $instance_id)
    {
        list($response) = $this->getInstanceWithHttpInfo($account_id, $form_id, $instance_id);
        return $response;
    }

    /**
     * Operation getInstanceWithHttpInfo
     *
     * Get form instance
     *
     * @param ?string $account_id Account identifier in which the web form resides
     * @param ?string $form_id Unique identifier for a web form entity that is consistent for it&#39;s lifetime
     * @param ?string $instance_id Unique identifier for a Web Form Instance that is consistent until its expiration
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\WebForms\Model\WebFormInstance, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstanceWithHttpInfo($account_id, $form_id, $instance_id): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getInstance');
        }
        // verify the required parameter 'form_id' is set
        if ($form_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $form_id when calling getInstance');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling getInstance');
        }
        // parse inputs
        $resourcePath = "/accounts/{accountId}/forms/{formId}/instances/{instanceId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($form_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "formId", $form_id);
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "instanceId", $instance_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\WebForms\Model\WebFormInstance',
                '/accounts/{accountId}/forms/{formId}/instances/{instanceId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\WebForms\Model\WebFormInstance', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\WebFormInstance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listInstances
     *
     * List instances
     *
     * @param ?string $account_id Account identifier in which the web form resides
     * @param ?string $form_id Unique identifier for a web form that is consistent for it&#39;s lifetime
     * @param  \DocuSign\WebForms\Api\FormInstanceManagementApi\ListInstancesOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\WebForms\Model\WebFormInstanceList
     */
    public function listInstances($account_id, $form_id, \DocuSign\WebForms\Api\FormInstanceManagementApi\ListInstancesOptions $options = null)
    {
        list($response) = $this->listInstancesWithHttpInfo($account_id, $form_id, $options);
        return $response;
    }

    /**
     * Operation listInstancesWithHttpInfo
     *
     * List instances
     *
     * @param ?string $account_id Account identifier in which the web form resides
     * @param ?string $form_id Unique identifier for a web form that is consistent for it&#39;s lifetime
     * @param  \DocuSign\WebForms\Api\FormInstanceManagementApi\ListInstancesOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\WebForms\Model\WebFormInstanceList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInstancesWithHttpInfo($account_id, $form_id, \DocuSign\WebForms\Api\FormInstanceManagementApi\ListInstancesOptions $options = null): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling listInstances');
        }
        // verify the required parameter 'form_id' is set
        if ($form_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $form_id when calling listInstances');
        }
        if ($options != null && !is_null($options->getclientUserId()) &&(strlen($options->getclientUserId()) > 100)) {
            throw new \InvalidArgumentException('invalid length for "$client_user_id" when calling FormInstanceManagementApi.listInstances, must be smaller than or equal to 100.');
        }

        // parse inputs
        $resourcePath = "/accounts/{accountId}/forms/{formId}/instances";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getClientUserId() != 'null') {
                $queryParams['client_user_id'] = $this->apiClient->getSerializer()->toQueryValue($options->getClientUserId());
            }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($form_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "formId", $form_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\WebForms\Model\WebFormInstanceList',
                '/accounts/{accountId}/forms/{formId}/instances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\WebForms\Model\WebFormInstanceList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\WebFormInstanceList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation refreshToken
     *
     * Refreshes the instance token
     *
     * @param ?string $account_id Account identifier in which the web form resides
     * @param ?string $form_id Unique identifier for a web form entity that is consistent for it&#39;s lifetime
     * @param ?string $instance_id Unique identifier for a Web Form Instance that is consistent until its expiration
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\WebForms\Model\WebFormInstance
     */
    public function refreshToken($account_id, $form_id, $instance_id)
    {
        list($response) = $this->refreshTokenWithHttpInfo($account_id, $form_id, $instance_id);
        return $response;
    }

    /**
     * Operation refreshTokenWithHttpInfo
     *
     * Refreshes the instance token
     *
     * @param ?string $account_id Account identifier in which the web form resides
     * @param ?string $form_id Unique identifier for a web form entity that is consistent for it&#39;s lifetime
     * @param ?string $instance_id Unique identifier for a Web Form Instance that is consistent until its expiration
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\WebForms\Model\WebFormInstance, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshTokenWithHttpInfo($account_id, $form_id, $instance_id): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling refreshToken');
        }
        // verify the required parameter 'form_id' is set
        if ($form_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $form_id when calling refreshToken');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling refreshToken');
        }
        // parse inputs
        $resourcePath = "/accounts/{accountId}/forms/{formId}/instances/{instanceId}/refresh";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($form_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "formId", $form_id);
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "instanceId", $instance_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\WebForms\Model\WebFormInstance',
                '/accounts/{accountId}/forms/{formId}/instances/{instanceId}/refresh'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\WebForms\Model\WebFormInstance', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\WebFormInstance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\WebForms\Model\HttpError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
