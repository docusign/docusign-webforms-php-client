<?php
/**
 * TemplateProperties
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\WebForms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\WebForms\Model;

use \ArrayAccess;
use DocuSign\WebForms\ObjectSerializer;

/**
 * TemplateProperties Class Doc Comment
 *
 * @category    Class
 * @description Information about a DocuSign template that will be used to seed a web form.
 * @package     DocuSign\WebForms
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TemplateProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TemplateProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'original_template_id' => '?string',
        'cloned_template_id' => '?string',
        'imported_date_time' => '?string',
        'recipient_ids' => '?string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'original_template_id' => null,
        'cloned_template_id' => null,
        'imported_date_time' => 'date-time',
        'recipient_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'original_template_id' => 'originalTemplateId',
        'cloned_template_id' => 'clonedTemplateId',
        'imported_date_time' => 'importedDateTime',
        'recipient_ids' => 'recipientIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'original_template_id' => 'setOriginalTemplateId',
        'cloned_template_id' => 'setClonedTemplateId',
        'imported_date_time' => 'setImportedDateTime',
        'recipient_ids' => 'setRecipientIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'original_template_id' => 'getOriginalTemplateId',
        'cloned_template_id' => 'getClonedTemplateId',
        'imported_date_time' => 'getImportedDateTime',
        'recipient_ids' => 'getRecipientIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['original_template_id'] = isset($data['original_template_id']) ? $data['original_template_id'] : null;
        $this->container['cloned_template_id'] = isset($data['cloned_template_id']) ? $data['cloned_template_id'] : null;
        $this->container['imported_date_time'] = isset($data['imported_date_time']) ? $data['imported_date_time'] : null;
        $this->container['recipient_ids'] = isset($data['recipient_ids']) ? $data['recipient_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets original_template_id
     *
     * @return ?string
     */
    public function getOriginalTemplateId()
    {
        return $this->container['original_template_id'];
    }

    /**
     * Sets original_template_id
     *
     * @param ?string $original_template_id Template identifier for original Template that is used by the DocuSign Template API.
     *
     * @return $this
     */
    public function setOriginalTemplateId($original_template_id)
    {
        $this->container['original_template_id'] = $original_template_id;

        return $this;
    }

    /**
     * Gets cloned_template_id
     *
     * @return ?string
     */
    public function getClonedTemplateId()
    {
        return $this->container['cloned_template_id'];
    }

    /**
     * Sets cloned_template_id
     *
     * @param ?string $cloned_template_id Template identifier for cloned Template that is used by the DocuSign Template API.
     *
     * @return $this
     */
    public function setClonedTemplateId($cloned_template_id)
    {
        $this->container['cloned_template_id'] = $cloned_template_id;

        return $this;
    }

    /**
     * Gets imported_date_time
     *
     * @return ?string
     */
    public function getImportedDateTime()
    {
        return $this->container['imported_date_time'];
    }

    /**
     * Sets imported_date_time
     *
     * @param ?string $imported_date_time Track the time of assignment of Template information to the Form.
     *
     * @return $this
     */
    public function setImportedDateTime($imported_date_time)
    {
        $this->container['imported_date_time'] = $imported_date_time;

        return $this;
    }

    /**
     * Gets recipient_ids
     *
     * @return ?string[]
     */
    public function getRecipientIds()
    {
        return $this->container['recipient_ids'];
    }

    /**
     * Sets recipient_ids
     *
     * @param ?string[] $recipient_ids Track mapped recipients on Template.
     *
     * @return $this
     */
    public function setRecipientIds($recipient_ids)
    {
        $this->container['recipient_ids'] = $recipient_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

