<?php
/**
 * WebFormInstance
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\WebForms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The Docusign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web Forms API version 1.1
 *
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\WebForms\Model;

use \ArrayAccess;
use DocuSign\WebForms\ObjectSerializer;

/**
 * WebFormInstance Class Doc Comment
 *
 * @category    Class
 * @description An object that contains the Web Form Instance required to render it  and its metadata such as created by, created time
 * @package     DocuSign\WebForms
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The Docusign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WebFormInstance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebFormInstance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'form_url' => '?string',
        'instance_token' => '?string',
        'token_expiration_date_time' => '?string',
        'id' => '?string',
        'form_id' => '?string',
        'account_id' => '?string',
        'client_user_id' => '?string',
        'tags' => '?string[]',
        'status' => '\DocuSign\WebForms\Model\InstanceStatus',
        'envelopes' => '\DocuSign\WebForms\Model\WebFormInstanceEnvelopes[]',
        'instance_metadata' => '\DocuSign\WebForms\Model\WebFormInstanceMetadata',
        'form_values' => '\DocuSign\WebForms\Model\WebFormValues',
        'recipients' => '\DocuSign\WebForms\Model\WebFormInstanceRecipients[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'form_url' => null,
        'instance_token' => null,
        'token_expiration_date_time' => null,
        'id' => null,
        'form_id' => null,
        'account_id' => null,
        'client_user_id' => null,
        'tags' => null,
        'status' => null,
        'envelopes' => null,
        'instance_metadata' => null,
        'form_values' => null,
        'recipients' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'form_url' => 'formUrl',
        'instance_token' => 'instanceToken',
        'token_expiration_date_time' => 'tokenExpirationDateTime',
        'id' => 'id',
        'form_id' => 'formId',
        'account_id' => 'accountId',
        'client_user_id' => 'clientUserId',
        'tags' => 'tags',
        'status' => 'status',
        'envelopes' => 'envelopes',
        'instance_metadata' => 'instanceMetadata',
        'form_values' => 'formValues',
        'recipients' => 'recipients'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'form_url' => 'setFormUrl',
        'instance_token' => 'setInstanceToken',
        'token_expiration_date_time' => 'setTokenExpirationDateTime',
        'id' => 'setId',
        'form_id' => 'setFormId',
        'account_id' => 'setAccountId',
        'client_user_id' => 'setClientUserId',
        'tags' => 'setTags',
        'status' => 'setStatus',
        'envelopes' => 'setEnvelopes',
        'instance_metadata' => 'setInstanceMetadata',
        'form_values' => 'setFormValues',
        'recipients' => 'setRecipients'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'form_url' => 'getFormUrl',
        'instance_token' => 'getInstanceToken',
        'token_expiration_date_time' => 'getTokenExpirationDateTime',
        'id' => 'getId',
        'form_id' => 'getFormId',
        'account_id' => 'getAccountId',
        'client_user_id' => 'getClientUserId',
        'tags' => 'getTags',
        'status' => 'getStatus',
        'envelopes' => 'getEnvelopes',
        'instance_metadata' => 'getInstanceMetadata',
        'form_values' => 'getFormValues',
        'recipients' => 'getRecipients'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['form_url'] = isset($data['form_url']) ? $data['form_url'] : null;
        $this->container['instance_token'] = isset($data['instance_token']) ? $data['instance_token'] : null;
        $this->container['token_expiration_date_time'] = isset($data['token_expiration_date_time']) ? $data['token_expiration_date_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['form_id'] = isset($data['form_id']) ? $data['form_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['client_user_id'] = isset($data['client_user_id']) ? $data['client_user_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['envelopes'] = isset($data['envelopes']) ? $data['envelopes'] : null;
        $this->container['instance_metadata'] = isset($data['instance_metadata']) ? $data['instance_metadata'] : null;
        $this->container['form_values'] = isset($data['form_values']) ? $data['form_values'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets form_url
     *
     * @return ?string
     */
    public function getFormUrl()
    {
        return $this->container['form_url'];
    }

    /**
     * Sets form_url
     *
     * @param ?string $form_url form_url
     *
     * @return $this
     */
    public function setFormUrl($form_url)
    {
        $this->container['form_url'] = $form_url;

        return $this;
    }

    /**
     * Gets instance_token
     *
     * @return ?string
     */
    public function getInstanceToken()
    {
        return $this->container['instance_token'];
    }

    /**
     * Sets instance_token
     *
     * @param ?string $instance_token instance_token
     *
     * @return $this
     */
    public function setInstanceToken($instance_token)
    {
        $this->container['instance_token'] = $instance_token;

        return $this;
    }

    /**
     * Gets token_expiration_date_time
     *
     * @return ?string
     */
    public function getTokenExpirationDateTime()
    {
        return $this->container['token_expiration_date_time'];
    }

    /**
     * Sets token_expiration_date_time
     *
     * @param ?string $token_expiration_date_time token_expiration_date_time
     *
     * @return $this
     */
    public function setTokenExpirationDateTime($token_expiration_date_time)
    {
        $this->container['token_expiration_date_time'] = $token_expiration_date_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return ?string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param ?string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return ?string
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param ?string $form_id Web form from which the instance is created
     *
     * @return $this
     */
    public function setFormId($form_id)
    {
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return ?string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param ?string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets client_user_id
     *
     * @return ?string
     */
    public function getClientUserId()
    {
        return $this->container['client_user_id'];
    }

    /**
     * Sets client_user_id
     *
     * @param ?string $client_user_id client_user_id
     *
     * @return $this
     */
    public function setClientUserId($client_user_id)
    {
        $this->container['client_user_id'] = $client_user_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return ?string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param ?string[] $tags List of tags provided by the user with each request. This field is optional.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \DocuSign\WebForms\Model\InstanceStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \DocuSign\WebForms\Model\InstanceStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets envelopes
     *
     * @return \DocuSign\WebForms\Model\WebFormInstanceEnvelopes[]
     */
    public function getEnvelopes()
    {
        return $this->container['envelopes'];
    }

    /**
     * Sets envelopes
     *
     * @param \DocuSign\WebForms\Model\WebFormInstanceEnvelopes[] $envelopes The associated envelope that is created when the instance is submitted
     *
     * @return $this
     */
    public function setEnvelopes($envelopes)
    {
        $this->container['envelopes'] = $envelopes;

        return $this;
    }

    /**
     * Gets instance_metadata
     *
     * @return \DocuSign\WebForms\Model\WebFormInstanceMetadata
     */
    public function getInstanceMetadata()
    {
        return $this->container['instance_metadata'];
    }

    /**
     * Sets instance_metadata
     *
     * @param \DocuSign\WebForms\Model\WebFormInstanceMetadata $instance_metadata instance_metadata
     *
     * @return $this
     */
    public function setInstanceMetadata($instance_metadata)
    {
        $this->container['instance_metadata'] = $instance_metadata;

        return $this;
    }

    /**
     * Gets form_values
     *
     * @return \DocuSign\WebForms\Model\WebFormValues
     */
    public function getFormValues()
    {
        return $this->container['form_values'];
    }

    /**
     * Sets form_values
     *
     * @param \DocuSign\WebForms\Model\WebFormValues $form_values form_values
     *
     * @return $this
     */
    public function setFormValues($form_values)
    {
        $this->container['form_values'] = $form_values;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \DocuSign\WebForms\Model\WebFormInstanceRecipients[]
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \DocuSign\WebForms\Model\WebFormInstanceRecipients[] $recipients The associated envelope that is created when the instance is submitted
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

